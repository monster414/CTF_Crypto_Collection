

# This file was *autogenerated* from the file exp.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1153696846823715458342658568392537778171840014923745253759529432977932183322553944430236879985 = Integer(1153696846823715458342658568392537778171840014923745253759529432977932183322553944430236879985); _sage_const_46735962204857190520476434898881001530665718155698898882603422023484998388668858692912250418134186095459060506275961050676051693220280588047233628259880712415593039977585805890920089318643002597837000049626154900908543384761210358835843974072960080857150727010985827690190496793207012355214605393036388807616 = Integer(46735962204857190520476434898881001530665718155698898882603422023484998388668858692912250418134186095459060506275961050676051693220280588047233628259880712415593039977585805890920089318643002597837000049626154900908543384761210358835843974072960080857150727010985827690190496793207012355214605393036388807616); _sage_const_7621 = Integer(7621); _sage_const_140376049134934822153964243403031201922239588054133319056483413311963385321279682186354948441840374124640187894619689719746347334298621083485494086361152915457458004998419817456902929318697902819798254427945343361548635794308362823239150919240307072688623000747781103375481834571274423004856276841225675241863 = Integer(140376049134934822153964243403031201922239588054133319056483413311963385321279682186354948441840374124640187894619689719746347334298621083485494086361152915457458004998419817456902929318697902819798254427945343361548635794308362823239150919240307072688623000747781103375481834571274423004856276841225675241863); _sage_const_200 = Integer(200); _sage_const_1236 = Integer(1236); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0p44 = RealNumber('0.44'); _sage_const_32 = Integer(32); _sage_const_0 = Integer(0)
from Crypto.Util.number import *
import gmpy2


dp_high = _sage_const_1153696846823715458342658568392537778171840014923745253759529432977932183322553944430236879985 
c = _sage_const_46735962204857190520476434898881001530665718155698898882603422023484998388668858692912250418134186095459060506275961050676051693220280588047233628259880712415593039977585805890920089318643002597837000049626154900908543384761210358835843974072960080857150727010985827690190496793207012355214605393036388807616  
e = _sage_const_7621 
n = _sage_const_140376049134934822153964243403031201922239588054133319056483413311963385321279682186354948441840374124640187894619689719746347334298621083485494086361152915457458004998419817456902929318697902819798254427945343361548635794308362823239150919240307072688623000747781103375481834571274423004856276841225675241863 
low_bits = _sage_const_200 
e_inv = inverse(e, n)
F = PolynomialRing(Zmod(n), names=('x',)); (x,) = F._first_ngens(1)
for k in range(_sage_const_1236 , e):
	# k = 1237
	f = (dp_high << low_bits) + x + (k - _sage_const_1 ) * e_inv
	x0 = f.small_roots(X=_sage_const_2 **low_bits, beta=_sage_const_0p44 , epsilon=_sage_const_1 /_sage_const_32 )
	if len(x0) != _sage_const_0 :
		dp = Integer((dp_high << low_bits) + x0[_sage_const_0 ])
		p = (e * dp - _sage_const_1  + k) // k
		if n % p == _sage_const_0 :
			q = n // p
			phi = (p - _sage_const_1 )*(q - _sage_const_1 )
			d = inverse(e, phi)
			m = pow(c, d, n)
			flag = long_to_bytes(m).decode("ISO-8859-1")
			if flag.startswith("flag"):
				print(flag)
				break

